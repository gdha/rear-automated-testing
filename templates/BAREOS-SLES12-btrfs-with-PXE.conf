# Bareos with PXE booting on a SLES 12 system with btrfs file system
# ##################################################################

OUTPUT=PXE
OUTPUT_PREFIX_PXE=$HOSTNAME

PXE_TFTP_URL=nfs://@boot_server@@pxe_tftpboot_path@
PXE_CONFIG_URL=nfs://@boot_server@@pxe_tftpboot_path@/pxelinux.cfg
# unattended means auto_recover with no questions asked (expert mode)
# We tend to use this for our automated test environment and we
# expect that you know what you are doing - if not - hire us 
PXE_RECOVER_MODE="unattended"
PXE_CREATE_LINKS="IP"


# BAREOS specific definitions
BACKUP=BAREOS
BAREOS_RESTORE_JOB=client-restore
BAREOS_FILESET=client-fileset
BAREOS_RECOVERY_MODE="automatic"

# run a bareos backup with bareos to have a full/incremental backup of the 'client'
PRE_BACKUP_SCRIPT=/usr/local/bin/client-backup-with-bareos

# we need to start the NFS sub-system as we needed it for mounting the PXE_CONFIG_URL
# With BACKUP=NETFS it is there by nature, but with BAREOS that is not the case
PROGS=( "${PROGS[@]}" showmount mount.nfs umount.nfs )
MODULES=( "${MODULES[@]}" nfs )
PRE_RECOVERY_SCRIPT="systemctl start rpcbind.target"

# as value for MODULES_LOAD (cf. https://github.com/rear/rear/issues/626):
#MODULES_LOAD=( )
# On SLE12-SP1 and SP2 with default btrfs subvolumes what is mounted at '/' is a btrfs snapshot subvolume
# that is controlled by snapper so that snapper is needed in the recovery system.
# In SLE12-SP1 and SP2 some btrfs subvolume directories (/var/lib/pgsql /var/lib/libvirt/images /var/lib/mariadb)
# have the "no copy on write (C)" file attribute set so that chattr is required in the recovery system
# and accordingly also lsattr is useful to have in the recovery system (but not strictly required):
REQUIRED_PROGS=( "${REQUIRED_PROGS[@]}" snapper chattr lsattr )
# Snapper setup by the recovery system uses /usr/lib/snapper/installation-helper
# that is linked to all libraries where snapper is linked to
# (except libdbus that is only needed by snapper).
# "installation-helper --step 1" creates a snapper config based on /etc/snapper/config-templates/default
COPY_AS_IS=( "${COPY_AS_IS[@]}" /usr/lib/snapper/installation-helper /etc/snapper/config-templates/default )
# Files in btrfs subvolumes are excluded by 'tar --one-file-system'
# so that such files must be explicitly included to be in the backup.
# Files in the following SLE12-SP2 default btrfs subvolumes are
# in the below example not included to be in the backup
#   /.snapshots  /var/crash
# but files in /home are included to be in the backup.
# You may use a command like
#   findmnt -n -r -o TARGET -t btrfs | grep -v '^/$' | egrep -v 'snapshots|crash'
# to generate the values:
BACKUP_PROG_INCLUDE=( /var/cache /var/lib/mailman /var/tmp /var/lib/pgsql /usr/local /opt /var/lib/libvirt/images /boot/grub2/i386-pc /var/opt /srv /boot/grub2/x86_64-efi /var/lib/mariadb /var/spool /var/lib/mysql /tmp /home /var/log /var/lib/named /var/lib/machines )
# The following POST_RECOVERY_SCRIPT implements during "rear recover"
# btrfs quota setup for snapper if that is used in the original system:
POST_RECOVERY_SCRIPT=( 'if snapper --no-dbus -r $TARGET_FS_ROOT get-config | grep -q "^QGROUP.*[0-9]/[0-9]" ; then snapper --no-dbus -r $TARGET_FS_ROOT set-config QGROUP= ; snapper --no-dbus -r $TARGET_FS_ROOT setup-quota && echo snapper setup-quota done || echo snapper setup-quota failed ; else echo snapper setup-quota not used ; fi' )

USE_STATIC_NETWORKING=y
# Update kernel options to have eth0/eth1 - see https://github.com/gdha/rear-automated-testing/issues/6
KERNEL_CMDLINE="$KERNEL_CMDLINE net.ifnames=0"

# To reduce the size of the ISO image
# before 112MB; after 60MB
FIRMWARE_FILES=( 'no' )

SSH_ROOT_PASSWORD="vagrant"

# To assure the time in the log file is correct
TIMESYNC=RDATE
TIMESYNC_SOURCE=0.pool.ntp.org

