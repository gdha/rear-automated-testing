---
# centos7/ansible/client/roles/rear-test/tasks/gpgkey_generate.yml
# Originates from git@github.com:juju4/ansible-gpgkey_generate.git

- name: check entropy state
  command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy

- name: entropy state
  debug: var=entropy

- name: Enable haveged - redhat
  service: name=haveged state=started enabled=yes
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: check entropy state
  command: "cat /proc/sys/kernel/random/entropy_avail"
  changed_when: false
  register: entropy2

- name: entropy state
  debug: var=entropy2

- debug: var=ansible_ssh_user
- debug: var=ansible_user
- debug: var=gpg_generator_user
- debug: var=gpg_user
- debug: var=gpg_home

- name: Ensure .gnupg config directory exists with right permissions
  file: dest={{ gpg_home }}/.gnupg state=directory mode=0700 owner="{{ gpg_generator_user }}"

- name: set defaut gpg options
  copy: src=gpg.conf dest="{{ gpg_home }}/.gnupg/gpg.conf" mode=0600 owner="{{ gpg_generator_user }}"

- name: copy default template for gpg key generation
  template: src=gen-key-script dest="{{ gpg_home }}/.gnupg/gen-key-script-{{ gpg_user }}" mode=0600 owner="{{ gpg_generator_user }}"

## Note: matching on realname or email doesn't allow to create multiple keys. alternative?
- name: check existing secret key
  shell: "gpg --list-secret-keys | grep '{{ gpg_realname }}'"
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: "{{ gpg_generator_user }}"
  register: gpgkeys
- debug: var=gpgkeys

- name: generate gpg key
  command: "gpg --batch --gen-key {{ gpg_home }}/.gnupg/gen-key-script-{{ gpg_user }} chdir={{ gpg_home }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: gpgkeys is defined and gpgkeys.stdout == ""
  register: genkey
#- debug: var=genkey

- name: import generated keys
  command: "gpg --import {{ gpg_home }}/{{ gpg_pubkeyfile }} {{ gpg_home }}/{{ gpg_privkeyfile }}"
  become: yes
  become_user: "{{ gpg_generator_user }}"
  when: gpgkeys is defined and gpgkeys.stdout == ""

- name: get user gpg fingerprint
  shell: "gpg --fingerprint {{ gpg_useremail }} | awk -F= '/Key fingerprint/ { gsub(/ /,\"\", $2); print $2 }' | tee {{ gpg_home }}/{{ gpg_fingerprint }}"
  changed_when: false
  register: gpg_user_fingerprint
  become: yes
  become_user: "{{ gpg_generator_user }}"

- name: get user armored public key
  shell: "gpg --export -a {{ gpg_useremail }} > {{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
  changed_when: false
  become: yes
  become_user: "{{ gpg_generator_user }}"


- debug: var=gpg_pull
- name: fetch files to orchestrator
  fetch: "src={{ item }} dest={{ gpg_pulldir }}/ flat=yes"
  with_items:
#    - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
#    - "{{ gpg_home }}/{{ gpg_pubkeyfile }}"
    - "{{ gpg_home }}/{{ gpg_pubkeyfileexport }}"
    - "{{ gpg_home }}/{{ gpg_fingerprint }}"
  when: gpg_pull is defined and gpg_pull

- name: fetch privatekey file to orchestrator
  fetch: "src={{ item }} dest={{ gpg_pulldir }}/ flat=yes"
  with_items:
    - "{{ gpg_home }}/{{ gpg_privkeyfile }}"
  when: gpg_pull is defined and gpg_pull and gpg_pull_privatekey is defined and gpg_pull_privatekey


